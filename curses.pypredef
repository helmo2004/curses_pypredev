from curses import wrapper

version = str

ALL_MOUSE_EVENTS = int
A_ALTCHARSET = int
A_ATTRIBUTES = int
A_BLINK = int
A_BOLD = int
A_CHARTEXT = int
A_COLOR = int
A_DIM = int
A_HORIZONTAL = int
A_INVIS = int
A_LEFT = int
A_LOW = int
A_NORMAL = int
A_PROTECT = int
A_REVERSE = int
A_RIGHT = int
A_STANDOUT = int
A_TOP = int
A_UNDERLINE = int
A_VERTICAL = int
BUTTON1_CLICKED = int
BUTTON1_DOUBLE_CLICKED = int
BUTTON1_PRESSED = int
BUTTON1_RELEASED = int
BUTTON1_TRIPLE_CLICKED = int
BUTTON2_CLICKED = int
BUTTON2_DOUBLE_CLICKED = int
BUTTON2_PRESSED = int
BUTTON2_RELEASED = int
BUTTON2_TRIPLE_CLICKED = int
BUTTON3_CLICKED = int
BUTTON3_DOUBLE_CLICKED = int
BUTTON3_PRESSED = int
BUTTON3_RELEASED = int
BUTTON3_TRIPLE_CLICKED = int
BUTTON4_CLICKED = int
BUTTON4_DOUBLE_CLICKED = int
BUTTON4_PRESSED = int
BUTTON4_RELEASED = int
BUTTON4_TRIPLE_CLICKED = int
BUTTON_ALT = int
BUTTON_CTRL = int
BUTTON_SHIFT = int
COLOR_BLACK = int
COLOR_BLUE = int
COLOR_CYAN = int
COLOR_GREEN = int
COLOR_MAGENTA = int
COLOR_RED = int
COLOR_WHITE = int
COLOR_YELLOW = int
ERR = int
KEY_A1 = int
KEY_A3 = int
KEY_B2 = int
KEY_BACKSPACE = int
KEY_BEG = int
KEY_BREAK = int
KEY_BTAB = int
KEY_C1 = int
KEY_C3 = int
KEY_CANCEL = int
KEY_CATAB = int
KEY_CLEAR = int
KEY_CLOSE = int
KEY_COMMAND = int
KEY_COPY = int
KEY_CREATE = int
KEY_CTAB = int
KEY_DC = int
KEY_DL = int
KEY_DOWN = int
KEY_EIC = int
KEY_END = int
KEY_ENTER = int
KEY_EOL = int
KEY_EOS = int
KEY_EXIT = int
KEY_F0 = int
KEY_F1 = int
KEY_F10 = int
KEY_F11 = int
KEY_F12 = int
KEY_F13 = int
KEY_F14 = int
KEY_F15 = int
KEY_F16 = int
KEY_F17 = int
KEY_F18 = int
KEY_F19 = int
KEY_F2 = int
KEY_F20 = int
KEY_F21 = int
KEY_F22 = int
KEY_F23 = int
KEY_F24 = int
KEY_F25 = int
KEY_F26 = int
KEY_F27 = int
KEY_F28 = int
KEY_F29 = int
KEY_F3 = int
KEY_F30 = int
KEY_F31 = int
KEY_F32 = int
KEY_F33 = int
KEY_F34 = int
KEY_F35 = int
KEY_F36 = int
KEY_F37 = int
KEY_F38 = int
KEY_F39 = int
KEY_F4 = int
KEY_F40 = int
KEY_F41 = int
KEY_F42 = int
KEY_F43 = int
KEY_F44 = int
KEY_F45 = int
KEY_F46 = int
KEY_F47 = int
KEY_F48 = int
KEY_F49 = int
KEY_F5 = int
KEY_F50 = int
KEY_F51 = int
KEY_F52 = int
KEY_F53 = int
KEY_F54 = int
KEY_F55 = int
KEY_F56 = int
KEY_F57 = int
KEY_F58 = int
KEY_F59 = int
KEY_F6 = int
KEY_F60 = int
KEY_F61 = int
KEY_F62 = int
KEY_F63 = int
KEY_F7 = int
KEY_F8 = int
KEY_F9 = int
KEY_FIND = int
KEY_HELP = int
KEY_HOME = int
KEY_IC = int
KEY_IL = int
KEY_LEFT = int
KEY_LL = int
KEY_MARK = int
KEY_MAX = int
KEY_MESSAGE = int
KEY_MIN = int
KEY_MOUSE = int
KEY_MOVE = int
KEY_NEXT = int
KEY_NPAGE = int
KEY_OPEN = int
KEY_OPTIONS = int
KEY_PPAGE = int
KEY_PREVIOUS = int
KEY_PRINT = int
KEY_REDO = int
KEY_REFERENCE = int
KEY_REFRESH = int
KEY_REPLACE = int
KEY_RESET = int
KEY_RESIZE = int
KEY_RESTART = int
KEY_RESUME = int
KEY_RIGHT = int
KEY_SAVE = int
KEY_SBEG = int
KEY_SCANCEL = int
KEY_SCOMMAND = int
KEY_SCOPY = int
KEY_SCREATE = int
KEY_SDC = int
KEY_SDL = int
KEY_SELECT = int
KEY_SEND = int
KEY_SEOL = int
KEY_SEXIT = int
KEY_SF = int
KEY_SFIND = int
KEY_SHELP = int
KEY_SHOME = int
KEY_SIC = int
KEY_SLEFT = int
KEY_SMESSAGE = int
KEY_SMOVE = int
KEY_SNEXT = int
KEY_SOPTIONS = int
KEY_SPREVIOUS = int
KEY_SPRINT = int
KEY_SR = int
KEY_SREDO = int
KEY_SREPLACE = int
KEY_SRESET = int
KEY_SRIGHT = int
KEY_SRSUME = int
KEY_SSAVE = int
KEY_SSUSPEND = int
KEY_STAB = int
KEY_SUNDO = int
KEY_SUSPEND = int
KEY_UNDO = int
KEY_UP = int
OK = int
REPORT_MOUSE_POSITION = int


class error:
    """Common base class for all non-exit exceptions."""
    pass

    args = None

    def with_traceback(*argv, **kwargs):
        """Exception.with_traceback(tb) -- set self.__traceback__ to tb and
        return self."""
        pass


class WindowObject:

    def addch(ch, attr=None):
        """Note A character means a C character (an ASCII code), rather than a
        Python character (a string of length 1). (This note is true whenever
        the documentation mentions a character.) The built-in ord() is handy
        for conveying strings to codes.

        Paint character ch at (y, x) with attributes attr, overwriting any character
        previously painter at that location. By default, the character position and
        attributes are the current settings for the window object.

        Note
        Writing outside the window, subwindow, or pad raises a curses.error.
        Attempting to write to the lower right corner of a window, subwindow,
        or pad will cause an exception to be raised after the character is printed.
        """
        pass

    def addch(y, x, ch, attr=None):
        """Note A character means a C character (an ASCII code), rather than a
        Python character (a string of length 1). (This note is true whenever
        the documentation mentions a character.) The built-in ord() is handy
        for conveying strings to codes.

        Paint character ch at (y, x) with attributes attr, overwriting any character
        previously painter at that location. By default, the character position and
        attributes are the current settings for the window object.

        Note
        Writing outside the window, subwindow, or pad raises a curses.error.
        Attempting to write to the lower right corner of a window, subwindow,
        or pad will cause an exception to be raised after the character is printed.
        """
        pass

    def addnstr(str, n, attr=None):
        """Paint at most n characters of the string with attributes attr,
        overwriting anything previously on the display."""
        pass

    def addnstr(y, x, str, n, attr=None):
        """Paint at most n characters of the string str at (y, x) with
        attributes attr, overwriting anything previously on the display."""
        pass

    def addstr(str, attr=None):
        """Paint the string str with attributes attr, overwriting anything
        previously on the display.

        Note:
        Writing outside the window, subwindow, or pad raises curses.error.
        Attempting to write to the lower right corner of a window, subwindow, or pad
        will cause an exception to be raised after the string is printed.
        """
        pass

    def addstr(y, x, str, attr=None):
        """Paint the string str at (y, x) with attributes attr, overwriting
        anything previously on the display.

        Note:
        Writing outside the window, subwindow, or pad raises curses.error.
        Attempting to write to the lower right corner of a window, subwindow, or pad
        will cause an exception to be raised after the string is printed.
        """
        pass

    def attroff(attr):
        """Remove attribute attr from the “background” set applied to all
        writes to the current window."""
        pass

    def attron(attr):
        """Add attribute attr from the “background” set applied to all writes
        to the current window."""

    def attrset(attr):
        """Set the “background” set of attributes to attr.

        This set is initially 0 (no attributes).
        """
        pass

    def bkgd(ch, attr):
        """Set the background property of the window to the character ch, with
        attributes attr.

        The change is then applied to every character position in that
        window: The attribute of every character in the window is
        changed to the new background attribute. Wherever the former
        background character appears, it is changed to the new
        background character.
        """
        pass

    def bkgdset(ch, attr=0):
        """Set the window’s background.

        A window’s background consists of a character and any
        combination of attributes. The attribute part of the background
        is combined (OR’ed) with all non-blank characters that are
        written into the window. Both the character and attribute parts
        of the background are combined with the blank characters. The
        background becomes a property of the character and moves with
        the character through any scrolling and insert/delete
        line/character operations.
        """
        pass

    def border(ls=0, rs=0, ts=0, bs=0, tl=0, tr=0, bl=0, br=0):
        """Draw a border around the edges of the window. Each parameter
        specifies the character to use for a specific part of the border; see
        the table below for more details. The characters can be specified as
        integers or as one-character strings.

        Note:
        A 0 value for any parameter will cause the default character to be used for that parameter.
        Keyword parameters can not be used. The defaults are listed in this table:
        Param | Description          | Default value
        ------+----------------------+-------------
        ls    | Left side            | ACS_VLINE
        rs    | Right side           | ACS_VLINE
        ts    | Top                  | ACS_HLINE
        bs    | Bottom               | ACS_HLINE
        tl    | Upper-left corner    | ACS_ULCORNER
        tr    | Upper-right corner   | ACS_URCORNER
        bl    | Bottom-left corner   | ACS_LLCORNER
        br    | Bottom-right corner  | ACS_LRCORNER
        """
        pass

    def box(vertch=0, horch=0):
        """Similar to border(), but both ls and rs are vertch and both ts and
        bs are horch.

        The default corner characters are always used by this function.
        """
        pass

    def chgat(attr):
        """Set the attributes of num characters at the current cursor position,
        or at position (y, x) if supplied.

        If num is not given or is -1, the attribute will be set on all
        the characters to the end of the line. This function moves
        cursor to position (y, x) if supplied. The changed line will be
        touched using the touchline() method so that the contents will
        be redisplayed by the next window refresh.
        """
        pass

    def chgat(num, attr):
        """Set the attributes of num characters at the current cursor position,
        or at position (y, x) if supplied.

        If num is not given or is -1, the attribute will be set on all
        the characters to the end of the line. This function moves
        cursor to position (y, x) if supplied. The changed line will be
        touched using the touchline() method so that the contents will
        be redisplayed by the next window refresh.
        """
        pass

    def chgat(y, x, attr):
        """Set the attributes of num characters at the current cursor position,
        or at position (y, x) if supplied.

        If num is not given or is -1, the attribute will be set on all
        the characters to the end of the line. This function moves
        cursor to position (y, x) if supplied. The changed line will be
        touched using the touchline() method so that the contents will
        be redisplayed by the next window refresh.
        """
        pass

    def chgat(y, x, num, attr):
        """Set the attributes of num characters at the current cursor position,
        or at position (y, x) if supplied.

        If num is not given or is -1, the attribute will be set on all
        the characters to the end of the line. This function moves
        cursor to position (y, x) if supplied. The changed line will be
        touched using the touchline() method so that the contents will
        be redisplayed by the next window refresh.
        """
        pass

    def clear():
        """Like erase(), but also cause the whole window to be repainted upon
        next call to refresh()."""
        pass

    def clearok(yes):
        """If yes is 1, the next call to refresh() will clear the window
        completely."""
        pass

    def clrtobot():
        """Erase from cursor to the end of the window: all lines below the
        cursor are deleted, and then the equivalent of clrtoeol() is
        performed."""
        pass

    def clrtoeol():
        """Erase from cursor to the end of the line."""
        pass

    def cursyncup():
        """Update the current cursor position of all the ancestors of the
        window to reflect the current cursor position of the window."""
        pass

    def delch():
        """Delete any character under cursor."""
        pass

    def delch(y, x):
        """Delete any character at (y, x)."""
        pass

    def deleteln():
        """Delete the line under the cursor.

        All following lines are moved up by one line.
        """
        pass

    def derwin(begin_y, begin_x):
        """An abbreviation for “derive window”, derwin() is the same as calling
        subwin(), except that begin_y and begin_x are relative to the origin of
        the window, rather than relative to the entire screen.

        Return a window object for the derived window.
        """
        pass

    def derwin(nlines, ncols, begin_y, begin_x):
        """An abbreviation for “derive window”, derwin() is the same as calling
        subwin(), except that begin_y and begin_x are relative to the origin of
        the window, rather than relative to the entire screen.

        Return a window object for the derived window.
        """
        pass

    def echochar(ch, attr=0):
        """Add character ch with attribute attr, and immediately call refresh()
        on the window."""
        pass

    def enclose(y, x):
        """Test whether the given pair of screen-relative character-cell
        coordinates are enclosed by the given window, returning True or False.

        It is useful for determining what subset of the screen windows
        enclose the location of a mouse event.
        """
        return bool

    def erase():
        """Clear the window."""
        pass

    def getbegyx():
        """Return a tuple (y, x) of co-ordinates of upper-left corner."""
        return tuple(int, int)

    def getbkgd():
        """Return the given window’s current background character/attribute
        pair."""
        return int

    def getch():
        """Get a character.

        Note that the integer returned does not have to be in ASCII
        range: function keys, keypad keys and so on return numbers
        higher than 256. In no-delay mode, -1 is returned if there is no
        input, else getch() waits until a key is pressed.
        """
        return int

    def getch(y, x):
        """Get a character.

        Note that the integer returned does not have to be in ASCII
        range: function keys, keypad keys and so on return numbers
        higher than 256. In no-delay mode, -1 is returned if there is no
        input, else getch() waits until a key is pressed.
        """
        return int

    def getkey():
        """Get a character, returning a string instead of an integer, as
        getch() does.

        Function keys, keypad keys and so on return a multibyte string
        containing the key name. In no-delay mode, an exception is
        raised if there is no input.
        """
        return string

    def getkey(y, x):
        """Get a character, returning a string instead of an integer, as
        getch() does.

        Function keys, keypad keys and so on return a multibyte string
        containing the key name. In no-delay mode, an exception is
        raised if there is no input.
        """
        return string

    def getmaxyx():
        """Return a tuple (y, x) of the height and width of the window."""
        return tuple(int, int)

    def getparyx():
        """Return the beginning coordinates of this window relative to its
        parent window into two integer variables y and x.

        Return -1, -1 if this window has no parent.
        """
        return tuple(int, int)

    def getstr():
        """Read a string from the user, with primitive line editing
        capacity."""
        return str

    def getstr(y, x):
        """Read a string from the user, with primitive line editing
        capacity."""
        return str

    def getyx():
        """Return a tuple (y, x) of current cursor position relative to the
        window’s upper-left corner."""
        return tuple(int, int)

    def hline(ch, n):
        """Display a horizontal line starting at cursor with length n
        consisting of the character ch."""
        pass

    def hline(y, x, ch, n):
        """Display a horizontal line starting at (y, x) with length n
        consisting of the character ch."""
        pass

    def idcok(flag):
        """If flag is False, curses no longer considers using the hardware
        insert/delete character feature of the terminal; if flag is True, use
        of character insertion and deletion is enabled.

        When curses is first initialized, use of character insert/delete
        is enabled by default.
        """
        pass

    def idlok(yes):
        """If called with yes equal to 1, curses will try and use hardware line
        editing facilities.

        Otherwise, line insertion/deletion are disabled.
        """
        pass

    def immedok(flag):
        """If flag is True, any change in the window image automatically causes
        the window to be refreshed; you no longer have to call refresh()
        yourself.

        However, it may degrade performance considerably, due to
        repeated calls to wrefresh. This option is disabled by default.
        """
        pass

    def inch():
        """Return the character at the cursor in the window.

        The bottom 8 bits are the character proper, and upper bits are
        the attributes.
        """
        return int

    def inch(y, x):
        """Return the character at the given position in the window.

        The bottom 8 bits are the character proper, and upper bits are
        the attributes.
        """
        return int

    def insch(ch, attr=None):
        """Paint character ch at cursor with attributes attr, moving the line
        from position x right by one character."""
        pass

    def insch(y, x, ch, attr=None):
        """Paint character ch at (y, x) with attributes attr, moving the line
        from position x right by one character."""
        pass

    def insdelln(nlines):
        """Insert nlines lines into the specified window above the current
        line.

        The nlines bottom lines are lost. For negative nlines, delete
        nlines lines starting with the one under the cursor, and move
        the remaining lines up. The bottom nlines lines are cleared. The
        current cursor position remains the same.
        """
        pass

    def insertln():
        """Insert a blank line under the cursor.

        All following lines are moved down by one line.
        """
        pass

    def insnstr(str, n, attr=None):
        """Insert a character string (as many characters as will fit on the
        line) before the character under the cursor, up to n characters.

        If n is zero or negative, the entire string is inserted. All
        characters to the right of the cursor are shifted right, with
        the rightmost characters on the line being lost. The cursor
        position does not change (after moving to y, x, if specified).
        """
        pass

    def insnstr(y, x, str, n, attr=None):
        """Insert a character string (as many characters as will fit on the
        line) before the character under the cursor, up to n characters.

        If n is zero or negative, the entire string is inserted. All
        characters to the right of the cursor are shifted right, with
        the rightmost characters on the line being lost. The cursor
        position does not change (after moving to y, x, if specified).
        """
        pass

    def insstr(str, attr=None):
        """Insert a character string (as many characters as will fit on the
        line) before the character under the cursor.

        All characters to the right of the cursor are shifted right,
        with the rightmost characters on the line being lost. The cursor
        position does not change (after moving to y, x, if specified).
        """
        pass

    def insstr(y, x, str, attr=None):
        """Insert a character string (as many characters as will fit on the
        line) before the character under the cursor.

        All characters to the right of the cursor are shifted right,
        with the rightmost characters on the line being lost. The cursor
        position does not change (after moving to y, x, if specified).
        """
        pass

    def instr(n=None):
        """Return a string of characters, extracted from the window starting at
        the current cursor position, or at y, x if specified.

        Attributes are stripped from the characters. If n is specified,
        instr() returns a string at most n characters long (exclusive of
        the trailing NUL).
        """
        return str

    def instr(y, x, n=None):
        """Return a string of characters, extracted from the window starting at
        the current cursor position, or at y, x if specified.

        Attributes are stripped from the characters. If n is specified,
        instr() returns a string at most n characters long (exclusive of
        the trailing NUL).
        """
        return str

    def is_linetouched(line):
        """Return True if the specified line was modified since the last call
        to refresh(); otherwise return False.

        Raise a curses.error exception if line is not valid for the
        given window.
        """
        return bool

    def is_wintouched():
        """Return True if the specified window was modified since the last call
        to refresh(); otherwise return False."""
        return bool

    def keypad(yes):
        """If yes is 1, escape sequences generated by some keys (keypad,
        function keys) will be interpreted by curses.

        If yes is 0, escape sequences will be left as is in the input
        stream.
        """
        pass

    def leaveok(yes):
        """If yes is 1, cursor is left where it is on update, instead of being
        at “cursor position.” This reduces cursor movement where possible. If
        possible the cursor will be made invisible.

        If yes is 0, cursor will always be at “cursor position” after an
        update.
        """
        pass

    def move(new_y, new_x):
        """Move cursor to (new_y, new_x)."""
        pass

    def mvderwin(y, x):
        """Move the window inside its parent window.

        The screen-relative parameters of the window are not changed.
        This routine is used to display different parts of the parent
        window at the same physical position on the screen.
        """
        pass

    def mvwin(new_y, new_x):
        """Move the window so its upper-left corner is at (new_y, new_x)."""
        pass

    def nodelay(yes):
        """If yes is 1, getch() will be non-blocking."""

    def notimeout(yes):
        """If yes is 1, escape sequences will not be timed out.

        If yes is 0, after a few milliseconds, an escape sequence will
        not be interpreted, and will be left in the input stream as is.
        """
        pass

    def noutrefresh():
        """Mark for refresh but wait.

        This function updates the data structure representing the
        desired state of the window, but does not force an update of the
        physical screen. To accomplish that, call doupdate().
        """
        pass

    def overlay(destwin, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol):
        """Overlay the window on top of destwin.

        The windows need not be the same size, only the overlapping
        region is copied. This copy is non-destructive, which means that
        the current background character does not overwrite the old
        contents of destwin.

        To get fine-grained control over the copied region, the second
        form of overlay() can be used. sminrow and smincol are the
        upper-left coordinates of the source window, and the other
        variables mark a rectangle in the destination window.
        """
        pass

    def overlay(destwin):
        """Overlay the window on top of destwin.

        The windows need not be the same size, only the overlapping
        region is copied. This copy is non-destructive, which means that
        the current background character does not overwrite the old
        contents of destwin.
        """
        pass

    def overwrite(destwin, sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol):
        """Overwrite the window on top of destwin. The windows need not be the
        same size, in which case only the overlapping region is copied. This
        copy is destructive, which means that the current background character
        overwrites the old contents of destwin.

        To get fine-grained control over the copied region, the second
        form of overwrite() can be used. sminrow and smincol are the
        upper-left coordinates of the source window, the other variables
        mark a rectangle in the destination window.
        """
        pass

    def overwrite(destwin):
        """Overwrite the window on top of destwin.

        The windows need not be the same size, in which case only the
        overlapping region is copied. This copy is destructive, which
        means that the current background character overwrites the old
        contents of destwin.
        """
        pass

    def putwin(file):
        """Write all data associated with the window into the provided file
        object.

        This information can be later retrieved using the getwin()
        function.
        """
        pass

    def redrawln(beg, num):
        """Indicate that the num screen lines, starting at line beg, are
        corrupted and should be completely redrawn on the next refresh()
        call."""
        pass

    def redrawwin():
        """Touch the entire window, causing it to be completely redrawn on the
        next refresh() call."""
        pass

    def refresh(pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol):
        """Update the display immediately (sync actual screen with previous
        drawing/deleting methods).

        The 6 optional arguments can only be specified when the window
        is a pad created with newpad(). The additional parameters are
        needed to indicate what part of the pad and screen are involved.
        pminrow and pmincol specify the upper left-hand corner of the
        rectangle to be displayed in the pad. sminrow, smincol, smaxrow,
        and smaxcol specify the edges of the rectangle to be displayed
        on the screen. The lower right-hand corner of the rectangle to
        be displayed in the pad is calculated from the screen
        coordinates, since the rectangles must be the same size. Both
        rectangles must be entirely contained within their respective
        structures. Negative values of pminrow, pmincol, sminrow, or
        smincol are treated as if they were zero.
        """
        pass

    def refresh():
        """Update the display immediately (sync actual screen with previous
        drawing/deleting methods)."""
        pass

    def resize(nlines, ncols):
        """Reallocate storage for a curses window to adjust its dimensions to
        the specified values.

        If either dimension is larger than the current values, the
        window’s data is filled with blanks that have the current
        background rendition (as set by bkgdset()) merged into them.
        """
        pass

    def scroll(lines=1):
        """Scroll the screen or scrolling region upward by lines lines."""
        pass

    def scrollok(flag):
        """Control what happens when the cursor of a window is moved off the
        edge of the window or scrolling region, either as a result of a newline
        action on the bottom line, or typing the last character of the last
        line.

        If flag is false, the cursor is left on the bottom line. If flag
        is true, the window is scrolled up one line. Note that in order
        to get the physical scrolling effect on the terminal, it is also
        necessary to call idlok().
        """
        pass

    def setscrreg(top, bottom):
        """Set the scrolling region from line top to line bottom.

        All scrolling actions will take place in this region.
        """
        pass

    def standend():
        """Turn off the attribute A_STANDOUT.

        On some terminals this has the side effect of turning off all
        attributes.
        """
        pass

    def standout():
        """Turn on attribute A_STANDOUT."""
        pass

    def subpad(begin_y, begin_x):
        """Return a sub-window, whose upper-left corner is at (begin_y,
        begin_x).

        By default, the sub-window will extend from the specified
        position to the lower right corner of the window.
        """
        return WindowObject

    def subpad(nlines, ncols, begin_y, begin_x):
        """Return a sub-window, whose upper-left corner is at (begin_y,
        begin_x), and whose width/height is ncols/nlines."""
        return WindowObject

    def subwin(begin_y, begin_x):
        """Return a sub-window, whose upper-left corner is at (begin_y,
        begin_x).

        By default, the sub-window will extend from the specified
        position to the lower right corner of the window.
        """
        return WindowObject

    def subwin(nlines, ncols, begin_y, begin_x):
        """Return a sub-window, whose upper-left corner is at (begin_y,
        begin_x), and whose width/height is ncols/nlines."""
        return WindowObject

    def syncdown():
        """Touch each location in the window that has been touched in any of
        its ancestor windows.

        This routine is called by refresh(), so it should almost never
        be necessary to call it manually.
        """
        pass

    def syncok(flag):
        """If called with flag set to True, then syncup() is called
        automatically whenever there is a change in the window."""
        pass

    def syncup():
        """Touch all locations in ancestors of the window that have been
        changed in the window."""
        pass

    def timeout(delay):
        """Set blocking or non-blocking read behavior for the window.

        If delay is negative, blocking read is used (which will wait
        indefinitely for input). If delay is zero, then non-blocking
        read is used, and -1 will be returned by getch() if no input is
        waiting. If delay is positive, then getch() will block for delay
        milliseconds, and return -1 if there is still no input at the
        end of that time.
        """
        pass

    def touchline(start, count, changed=True):
        """Pretend count lines have been changed, starting with line start.

        If changed is supplied, it specifies whether the affected lines
        are marked as having been changed (changed=1) or unchanged
        (changed=0).
        """
        pass

    def touchwin():
        """Pretend the whole window has been changed, for purposes of drawing
        optimizations."""
        pass

    def untouchwin():
        """Mark all lines in the window as unchanged since the last call to
        refresh()."""
        pass

    def vline(ch, n):
        """Display a vertical line starting at cursor with length n consisting
        of the character ch."""
        pass

    def vline(y, x, ch, n):
        """Display a vertical line starting at (y, x) with length n consisting
        of the character ch."""
        pass


def baudrate():
    """Return the output speed of the terminal in bits per second.

    On software terminal emulators it will have a fixed high value.
    Included for historical reasons; in former times, it was used to
    write output loops for time delays and occasionally to change
    interfaces depending on the line speed.
    """
    return int


def beep():
    """Emit a short attention sound."""
    pass


def can_change_color():
    """Return True or False, depending on whether the programmer can change the
    colors displayed by the terminal."""
    return bool


def cbreak():
    """Enter cbreak mode.

    In cbreak mode (sometimes called “rare” mode) normal tty line
    buffering is turned off and characters are available to be read one
    by one. However, unlike raw mode, special characters (interrupt,
    quit, suspend, and flow control) retain their effects on the tty
    driver and calling program. Calling first raw() then cbreak() leaves
    the terminal in cbreak mode.
    """
    pass


def color_content(color_number):
    """Return the intensity of the red, green, and blue (RGB) components in the
    color color_number, which must be between 0 and COLORS.

    A 3-tuple is returned, containing the R,G,B values for the given
    color, which will be between 0 (no component) and 1000 (maximum
    amount of component).
    """
    return tuple(int, int, int)


def color_pair(color_number):
    """Return the attribute value for displaying text in the specified color.
    This attribute value can be combined with A_STANDOUT, A_REVERSE, and the
    other A_* attributes. pair_number() is the counterpart to this function.

    @type color_number: int
    """
    return curses.A_ATTRIBUTES


def curs_set(visibility):
    """Set the cursor state. visibility can be set to 0, 1, or 2, for
    invisible, normal, or very visible. If the terminal supports the visibility
    requested, the previous cursor state is returned; otherwise, an exception
    is raised. On many terminals, the “visible” mode is an underline cursor and
    the “very visible” mode is a block cursor.

    @type visibility: bool
    """
    pass


def def_prog_mode():
    """Save the current terminal mode as the “program” mode, the mode when the
    running program is using def  (Its counterpart is the “shell” mode, for
    when the program is not in def ) Subsequent calls to reset_prog_mode() will
    restore this mode."""
    pass


def def_shell_mode():
    """Save the current terminal mode as the “shell” mode, the mode when the
    running program is not using def  (Its counterpart is the “program” mode,
    when the program is using curses capabilities.) Subsequent calls to
    reset_shell_mode() will restore this mode."""
    pass


def delay_output(ms):
    """Insert an ms millisecond pause in output.

    @type ms: int
    """
    pass


def doupdate():
    """Update the physical screen. The curses library keeps two data
    structures, one representing the current physical screen contents and a
    virtual screen r epresenting the desired next state. The doupdate() ground
    updates the physical screen to match the virtual screen.

    The virtual screen may be updated by a noutrefresh() call after
    write operations such as addstr() have been performed on a window.
    The normal refresh() call is simply noutrefresh() followed by
    doupdate(); if you have to update multiple windows, you can speed
    performance and perhaps reduce screen flicker by issuing
    noutrefresh() calls on all windows, followed by a single doupdate().
    """
    pass


def echo():
    """Enter echo mode.

    In echo mode, each character input is echoed to the screen as it is
    entered.
    """
    pass


def endwin():
    """De-initialize the library, and return terminal to normal status."""
    pass


def erasechar():
    """Return the user’s current erase character.

    Under Unix operating systems this is a property of the controlling
    tty of the curses program, and is not set by the curses library
    itself.
    """
    return str


def filter():
    """The filter() routine, if used, must be called before initscr() is
    called.

    The effect is that, during those calls, LINES is set to 1; the
    capabilities clear, cup, cud, cud1, cuu1, cuu, vpa are disabled; and
    the home string is set to the value of cr. The effect is that the
    cursor is confined to the current line, and so are screen updates.
    This may be used for enabling character-at-a-time line editing
    without touching the rest of the screen.
    """
    pass


def flash():
    """Flash the screen.

    That is, change it to reverse-video and then change it back in a
    short interval. Some people prefer such as ‘visible bell’ to the
    audible attention signal produced by beep().
    """
    pass


def flushinp():
    """Flush all input buffers.

    This throws away any typeahead that has been typed by the user and
    has not yet been processed by the program.
    """
    pass


def getmouse():
    """After getch() returns KEY_MOUSE to signal a mouse event, this method
    should be call to retrieve the queued mouse event, represented as a 5-tuple
    (id, x, y, z, bstate).

    id is an ID value used to distinguish multiple devices, and x, y, z
    are the event’s coordinates. (z is currently unused.) bstate is an
    integer value whose bits will be set to indicate the type of event,
    and will be the bitwise OR of one or more of the following
    constants, where n is the button number from 1 to 4:
    BUTTONn_PRESSED, BUTTONn_RELEASED, BUTTONn_CLICKED,
    BUTTONn_DOUBLE_CLICKED, BUTTONn_TRIPLE_CLICKED, BUTTON_SHIFT,
    BUTTON_CTRL, BUTTON_ALT.
    """
    return tuple(int, int, int, int, int)


def getsyx():
    """Return the current coordinates of the virtual screen cursor in y and x.

    If leaveok is currently true, then -1,-1 is returned.
    """
    return tuple(int, int)


def getwin(file):
    """Read window related data stored in the file by an earlier putwin() call.
    The routine then creates and initializes a new window using that data,
    returning the new window object.

    @type file: str
    """
    return WindowObject


def has_colors():
    """Return True if the terminal can display colors; otherwise, return
    False."""
    return bool


def has_ic():
    """Return True if the terminal has insert- and delete-character
    capabilities.

    This function is included for historical reasons only, as all modern
    software terminal emulators have such capabilities.
    """
    return bool


def has_il():
    """Return True if the terminal has insert- and delete-line capabilities, or
    can simulate them using scrolling regions.

    This function is included for historical reasons only, as all modern
    software terminal emulators have such capabilities.
    """
    return bool


def has_key(ch):
    """Take a key value ch, and return True if the current terminal type
    recognizes a key with that value."""
    return bool


def halfdelay(tenths):
    """Used for half-delay mode, which is similar to cbreak mode in that
    characters typed by the user are immediately available to the program.
    However, after blocking for tenths tenths of seconds, an exception is
    raised if nothing has been typed. The value of tenths must be a number
    between 1 and 255. Use nocbreak() to leave half-delay mode.

    @type tenths: int
    """
    pass


def init_color(color_number, r, g, b):
    """Change the definition of a color, taking the number of the color to be
    changed followed by three RGB values (for the amounts of red, green, and
    blue c omponents).

    The value of color_number must be between 0 and COLORS. Each of r,
    g, b, must be a value between 0 and 1000. When init_color() is used,
    all occurrences of that color on the screen immediately change to
    the new definition. This function is a no-op on most terminals; it
    is active only if can_change_color() returns 1.
    """
    pass


def init_pair(pair_number, fg, bg):
    """Change the definition of a color-pair. It takes three arguments: the
    number of the color-pair to be changed, the foreground color number, and
    the background.

    color number. The value of pair_number must be between 1 and COLOR_PAIRS - 1
    (the 0 color pair is wired to white on black and cannot be changed). The value
    of fg and bg arguments must be between 0 and COLORS. If the color-pair was
    previously initialized, the screen is refreshed and all occurrences of that
    color-pair are changed to the new definition.
    """
    pass


def initscr():
    """Initialize the library. Return a WindowObject which represents the whole
    screen.

    Note:
    If there is an error opening the terminal, the underlying curses library may cause
    the interpreter to exit.
    """
    return WindowObject


def is_term_resized(nlines, ncols):
    """Return True if resize_term() would modify the window structure, False
    otherwise.

    @type nlines: int
    @type ncols: int
    """
    return bool


def isendwin():
    """Return True if endwin() has been called (that is, the curses library has
    been deinitialized)."""
    return bool


def keyname(k):
    """Return the name of the key numbered k.

    The name of a key generating printable ASCII character is the key’s
    character. The name of a control-key combination is a two-character
    string consisting of a caret followed by the corresponding printable
    ASCII character. The name of an alt-key combination (128–255) is a
    string consisting of the prefix ‘M-‘ followed by the name of the
    corresponding ASCII character.
    """
    return str


def killchar():
    """Return the user’s current line kill character.

    Under Unix operating systems this is a property of the controlling
    tty of the curses program, and is not set by the curses library
    itself.
    """
    return str


def longname():
    """Return a string containing the terminfo long name field describing the
    current terminal.

    The maximum length of a verbose description is 128 characters. It is
    defined only after the call to initscr().
    """
    return str


def meta(yes):
    """If yes is 1, allow 8-bit characters to be input. If yes is 0, allow only
    7-bit chars.

    @type yes: bool
    """
    pass


def mouseinterval(interval):
    """Set the maximum time in milliseconds that can elapse between press and
    release events in order for them to be recognized as a click, and return
    the previous interval value. The default value is 200 msec, or one fifth of
    a second.

    @type interval: int
    """


def mousemask(mousemask):
    """Set the mouse events to be reported, and return a tuple (availmask,
    oldmask). availmask indicates which of the specified mouse events can be
    reported; on complete failure it returns 0. oldmask is the previous value
    of the given window’s mouse event mask. If this function is never called,
    no mouse events are ever reported.

    @type mousemask: int
    """
    return (int, int)


def napms(ms):
    """Sleep for ms milliseconds.

    @type ms: int
    """
    pass


def newpad(nlines, ncols):
    """Create and return a pointer to a new pad data structure with the given
    number of lines and columns. A pad is returned as a window object.

    A pad is like a window, except that it is not restricted by the
    screen size, and is not necessarily associated with a particular
    part of the screen. Pads can be used when a large window is needed,
    and only a part of the window will be on the screen at one time.
    Automatic refreshes of pads (such as from scrolling or echoing of
    input) do not occur. The refresh() and noutrefresh() methods of a
    pad require 6 arguments to specify the part of the pad to be
    displayed and the location on the screen to be used for the display.
    The arguments are pminrow, pmincol, sminrow, smincol, smaxrow,
    smaxcol; the p arguments refer to the upper left corner of the pad
    region to be displayed and the s arguments define a clipping box on
    the screen within which the pad region is to be displayed.
    """
    return WindowObject


def newwin(nlines, ncols, begin_y=0, begin_x=0):
    """Return a new window, whose left-upper corner is at (begin_y, begin_x),
    and whose height/width is nlines/ncols.

    By default, the window will extend from the specified position to the
    lower right corner of the screen.

    @type nlines  : int
    @type ncols   : int
    @type begin_y : int
    @type begin_x : int
    """
    return WindowObject


def nl():
    """Enter newline mode.

    This mode translates the return key into newline on input, and
    translates newline into return and line-feed on output. Newline mode
    is initially on.
    """
    pass


def nocbreak():
    """Leave cbreak mode.

    Return to normal “cooked” mode with line buffering.
    """
    pass


def noecho():
    """Leave echo mode.

    Echoing of input characters is turned off.'
    """
    pass


def nonl():
    """Leave newline mode.

    Disable translation of return into newline on input, and disable
    low-level translation of newline into newline/return on output (but
    this does not change the behavior of addch('\n'), which always does
    the equivalent of return and line feed on the virtual screen). With
    translation off, curses can sometimes speed up vertical motion a
    little; also, it will be able to detect the return key on input.
    """
    pass


def noqiflush():
    """When the noqiflush() routine is used, normal flush of input and output
    queues associated with the INTR, QUIT and SUSP characters will not be done.

    You may want to call noqiflush() in a signal handler if you want
    output to continue as though the interrupt had not occurred, after
    the handler exits.
    """
    pass


def noraw():
    """Leave raw mode.

    Return to normal “cooked” mode with line buffering.
    """
    pass


def pair_content(pair_number):
    """Return a tuple (fg, bg) containing the colors for the requested color
    pair.

    The value of pair_number must be between 1 and COLOR_PAIRS - 1.

    @type pair_number : int
    """
    return tuple(int, int)


def pair_number(attr):
    """Return the number of the color-pair set by the attribute value attr.
    color_pair() is the counterpart to this function.

    @type attr : int
    """
    return int


def putp(string):
    """Equivalent to tputs(str, 1, putchar); emit the value of a specified
    terminfo capability for the current terminal. Note that the output of
    putp() always goes to standard output.

    @type string : str
    """
    pass


def qiflush(flag=True):
    """If flag is False, the effect is the same as calling noqiflush(). If flag
    is True, or no argument is provided, the queues will be flushed when these
    control characters are read.

    @type flag : bool
    """
    pass


def raw():
    """Enter raw mode.

    In raw mode, normal line buffering and processing of interrupt,
    quit, suspend, and flow control keys are turned off; characters are
    presented to curses input functions one by one.
    """
    pass


def reset_prog_mode():
    """Restore the terminal to “program” mode, as previously saved by
    def_prog_mode()."""
    pass


def reset_shell_mode():
    """Restore the terminal to “shell” mode, as previously saved by
    def_shell_mode()."""
    pass


def resetty():
    """Restore the state of the terminal modes to what it was at the last call
    to savetty()."""
    pass


def resize_term(nlines, ncols):
    """Backend function used by resizeterm(), performing most of the work; when
    resizing the windows, resize_term() blank-fills the areas that are
    extended. The calling application should fill in these areas with
    appropriate data. The resize_term() function attempts to resize all
    windows. However, due to the calling convention of pads, it is not possible
    to resize these without additional interaction with the application.

    @type nlines : int
    @type ncols  : int
    """
    pass


def resizeterm(nlines, ncols):
    """Resize the standard and current windows to the specified dimensions, and
    adjusts other bookkeeping data used by the curses library that record the
    window dimensions (in particular the SIGWINCH handler).

    @type nlines : int
    @type ncols  : int
    """
    pass


def savetty():
    """Save the current state of the terminal modes in a buffer, usable by
    resetty()."""
    pass


def setsyx(y, x):
    """Set the virtual screen cursor to y, x.

    If y and x are both -1, then leaveok is set.
    """
    pass


def setupterm(termstr=None, fd=sys.stdout):
    """Initialize the terminal.

    termstr is a string giving the terminal name; if omitted, the value
    of the TERM environment variable will be used. fd is the file
    descriptor to which any initialization sequences will be sent; if
    not supplied, the file descriptor for sys.stdout will be used.
    """
    pass


def start_color():
    """Must be called if the programmer wants to use colors, and before any
    other color manipulation routine is called.

    It is good practice to call this routine right after initscr().
    start_color() initializes eight basic colors (black, red, green,
    yellow, blue, magenta, cyan, and white), and two global variables in
    the curses module, COLORS and COLOR_PAIRS, containing the maximum
    number of colors and color-pairs the terminal can support. It also
    restores the colors on the terminal to the values they had when the
    terminal was just turned on.
    """
    pass


def termattrs():
    """Return a logical OR of all video attributes supported by the terminal.

    This information is useful when a curses program needs complete
    control over the appearance of the screen.
    """
    return int


def termname():
    """Return the value of the environment variable TERM, truncated to 14
    characters."""
    return str


def tigetflag(capname):
    """Return the value of the Boolean capability corresponding to the terminfo
    capability name capname. The value -1 is returned if capname is not a
    Boolean capability, or 0 if it is canceled or absent from the terminal
    description.

    @type capname : int
    """
    return bool


def tigetnum(capname):
    """Return the value of the numeric capability corresponding to the terminfo
    capability name capname. The value -2 is returned if capname is not a
    numeric capability, or -1 if it is canceled or absent from the terminal
    description.

    @type capname : int
    """
    return int


def tigetstr(capname):
    """Return the value of the string capability corresponding to the terminfo
    capability name capname. None is returned if capname is not a string
    capability, or is canceled or absent from the terminal description.

    @type capname : int
    """
    return str


def tparm(string, *params):
    """Instantiate the string with the supplied parameters, where str should be
    a parameterized string obtained from the terminfo database. E.g.
    tparm(tigetstr("cup"), 5, 3) could result in '\033[6;4H', the exact result
    depending on terminal type.

    @type string :str
    """
    return str


def typeahead(fd):
    """Specify that the file descriptor fd be used for typeahead checking. If
    fd is -1, then no typeahead checking is done. The curses library does.

    “line-breakout optimization” by looking for typeahead periodically while
    updating the screen. If input is found, and it is coming from a tty, the
    current update is postponed until refresh or doupdate is called again,
    allowing faster response to commands typed in advance. This function allows
    specifying a different file descriptor for typeahead checking.

    @type fd : int
    """
    pass


def unctrl(ch):
    """Return a string which is a printable representation of the character ch.
    Control characters are displayed as a caret followed by the character, for
    example as ^C. Printing characters are left as they are.

    @type ch : str
    """
    return str


def ungetch(ch):
    """Push ch so the next getch() will return it. Note Only one ch can be
    pushed before getch() is called.

    @type ch: str
    """
    pass


def ungetmouse(id, x, y, z, bstate):
    """Push a KEY_MOUSE event onto the input queue, associating the given state
    data with it.

    @type id     : int
    @type x      : int
    @type y      : int
    @type z      : int
    @type bstate : int
    """
    pass


def use_env(flag):
    """If used, this function should be called before initscr() or newterm are
    called. When flag is False, the values of lines and columns specified in
    the terminfo database will be used, even if environment variables LINES and
    COLUMNS (used by default) are set, or if curses is running in a window (in
    which case default behavior would be to use the window size if LINES and
    COLUMNS are not set).

    @type flag: int
    """
    pass


def use_default_colors():
    """Allow use of default values for colors on terminals supporting this
    feature.

    Use this to support transparency in your application. The default
    color is assigned to the color number -1. After calling this
    function, init_pair(x, def COLOR_RED, -1) initializes, for instance,
    color pair x to a red foreground color on the default background.
    """
    pass
